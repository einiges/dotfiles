#!/bin/zsh

trap 'kill 0' EXIT
trap 'exit' INT TERM QUIT

# -- Basic Setup --

monitor=${1:-primary}

[[ -v PANEL_NAME ]] || PANEL_NAME="bspwm-panel-${DISPLAY[2,-1]}"

# - Create new filedescriptor -
[[ -v PANEL_FIFO ]] || PANEL_FIFO="${XDG_RUNTIME_DIR:-${TMPDIR:-/tmp}}/${PANEL_NAME}"
[[ -p $PANEL_FIFO ]] && rm "$PANEL_FIFO"
mkfifo -m 600 "$PANEL_FIFO" || exit 1
exec 5<>"$PANEL_FIFO"



# -- Trap --

cleanup() {
	[[ -p $PANEL_FIFO ]] && rm "$PANEL_FIFO"
	exit
}

# trap 'kill 0' EXIT
# trap 'cleanup' INT TERM QUIT


# -- Settings --

# - Geometry -
# geometry:= 1:x, 2:y, 3: width, 4:height
geometry_keys=( x y width height)
geometry_values=( $(bspc query --monitor $monitor -T | jq '.rectangle[]') )

typeset -A geometry=( ${geometry_keys:^geometry_values} )

bar_tbo_padding=3 # top bottom outer
bar_tbi_padding=3 # top bottom inner
bar_lr_padding=3 # left right
(( geometry[x]     = bar_lr_padding ))
(( geometry[y]     = bar_tbo_padding ))
(( geometry[width] -= 2 * bar_lr_padding ))
(( geometry[height] = 28 ))


# - font -
font='NotoSans Nerd Font:size=9'
font_offset=0

# - colors -
bar_bg='#FDF6E3'
bar_fg='#657B83'
module_bg='#EEE8D5'
module_fg='#657B83'
highlight_fg='#76B9ED'

# - workspaces/tags/desktops -
ws_focused_bg="#DFD9C6"
ws_focused_fg="#002B36"
ws_active_bg="#EEE8D5"
ws_active_fg="#002B36"
ws_free_bg="#F4EEDB"
ws_free_fg="#A1AFAF"
ws_occupied_bg="#EEE8D5"
ws_occupied_fg="#6B8DA1"
ws_urgent_bg="$ws_occupied_bg"
ws_urgent_fg="#CB4B16"
ws_urgent_focused_bg="$ws_focused_bg"
ws_urgent_focused_fg="$ws_focused_fg"
ws_urgent_active_bg="$ws_active_bg"
ws_urgent_active_fg="$ws_urgent_fg"

# - spacing -
___='%{O3}' # space between ms
module_padding='%{O13}'

# - shorties -
module_left="%{B${module_bg}}%{F${module_fg}}${module_padding}"
module_right="${module_padding}%{B-}%{F-}"


# -- Modules --
typeset -A mods


# -- Icons --
typeset -A icons
icons[code]=''
icons[cubes]=''
icons[globe]=''
icons[mail]=''
icons[power]=''
icons[terminal]=''
icons[playback]='墳'
icons[playbackmute]='婢'
icons[capture]=''
icons[capturemute]=''
icons[music]=''

typeset -a desktop_icons
desktop_icons[1]='1  '
desktop_icons[2]='2  '
desktop_icons[3]='3  '
desktop_icons[4]='4  '
desktop_icons[5]='5  '
desktop_icons[8]='8  '
desktop_icons[9]='9  '
desktop_icons[10]='0  '



# -- Helper --

# $( sanitize string )
sanitize() {
	REPLY="${1:gs/%/%%}"
	REPLY="${REPLY:gs/\\n/ }"
}

# -- Pretty printer --


# $( ppTitle title )
ppTitle() {
	sanitize "$1"
	REPLY="${module_left}${REPLY}${module_right}"
}


# $( ppClock )
ppClock() {
	local cmd="%D{%_H %-M}"
	REPLY="${module_left}${(%)cmd}${module_right}"
}


# $( ppDay )
ppDay() {
	local cmd="%D{%a %-d}"
	REPLY="${module_left}${(%)cmd}${module_right}"
}


# $( ppMail )
ppMail() {
	local cmd=$(notmuch count tag:unread 'folder:"/^.*/Inbox$/"')
	REPLY="${module_left}${icons[mail]}%{O5}${cmd}${module_right}"
}


# $( ppMpd )
ppMpd() {
	if [[ -z "$(mpc current)" ]]; then
		REPLY=""
		return 0
	fi
	local title=$(mpc current --format '%title%')
	(( $#title > 25 )) && title="${title[0,24]%[[:space:]]}…"
	local artist=$(mpc current --format '[%{O5}[%albumartist%|%artist%]]')
	(( $#artist > 25 )) && artist="${artist[0,24]%[[:space:]]}…"
	REPLY="${module_left}${icons[music]}${artist}${module_right}${___}${module_left}${title}${module_right}"
}


# $( ppPlayback )
ppPlayback() {
	local playback_level=$(pamixer --get-volume)

	if pamixer --get-mute > /dev/null; then
		playback_state_icon=${icons[playbackmute]}
	else
		playback_state_icon=${icons[playback]}
	fi

	REPLY="${module_left}${playback_state_icon}%{O5}${playback_level}${module_right}"
}


# $( ppCapture )
ppCapture() {
	local capture_level=$(pamixer --source 44 --get-volume)

	if pamixer --source 44 --get-mute >/dev/null; then
		capture_state_icon=${icons[capturemute]}
	else
		capture_state_icon=${icons[capture]}
	fi

	REPLY="${module_left}${capture_state_icon}%{O5}${capture_level}${module_right}"
}


# $( ppDesktops <bspc wm -g> )
ppDesktops() {
	local -a desktops
	local ws_bg ws_fg name
	integer focused_monitor

	for item in ${(s.:.)1}; do
		name=${item[2,-1]}
		case $item in
			m* )
				focused_monitor=0
				continue
				;;
			M* )
				focused_monitor=1
				continue
				;;
			[FO]* )
				if (( focused_monitor )); then
					ws_bg=$ws_focused_bg
					ws_fg=$ws_focused_fg
				else
					ws_bg=$ws_active_bg
					ws_fg=$ws_active_fg
				fi
				;;
			U* )
				if (( focused_monitor )); then
					ws_bg=$ws_urgent_focused_bg
					ws_fg=$ws_urgent_focused_fg
				else
					ws_bg=$ws_urgent_active_bg
					ws_fg=$ws_urgent_active_fg
				fi
				;;
			f* ) # free|empty unfocused
				ws_bg=$ws_free_bg
				ws_fg=$ws_free_fg
				;;
			o* ) # occupied unfocused
				ws_bg=$ws_occupied_bg
				ws_fg=$ws_occupied_fg
				;;
			u* ) # urgent unfocused
				ws_bg=$ws_urgent_bg
				ws_fg=$ws_urgent_fg
				;;
			* )
				continue
		esac

		desktops[name]="%{B${ws_bg}}%{F${ws_fg}}${module_padding}${desktop_icons[name]}${module_padding}%{B-}%{F-}"
	done

	# join and strip empty elements
	REPLY="${(@pj.$___.)desktops:#}"
}




# -- Event generator --

{ print init; stdbuf -oL alsactl monitor } | while read line; do
	case ${line} in
		*Master\ Playback*|init ) ppPlayback; print "p$REPLY" >&5 ;&
		*Capture*|init )          ppCapture;  print "c$REPLY" >&5 ;&
	esac
done &

xtitle -t 60 -sf "%s\n" | while read title; do
	ppTitle "$title"
	print "T$REPLY" >&5
done &

while :; do
	ppClock
	print "C$REPLY" >&5
	sleep $(( ${(%):-"60-%D{%-S}"} ))
done &

while :; do
	ppDay
	print "D$REPLY" >&5
	# 86400s = 24 * 60 * 60s   # Seconds in a day
	#  3600s = 60 * 60s        # Seconds in an hour
	# 5 seconds past midnight
	sleep $(( ${(%):-"%D{86405-(%-H*3600+%-M*60+%-S)}"} ))
done &

while :; do
	ppMail
	print "M$REPLY" >&5
	sleep 600
done &

bspc subscribe report | while read -r line; do
	ppDesktops "${line:1}"
	print "W$REPLY" >&5
done &

mpc idleloop player | while read -r line; do
	ppMpd
	print "A$REPLY" >&5
done &

# -- Event handler --

while read -r cmd <&5; do

	case "$cmd" in
		W* ) m='desktops' ;;
		T* ) m='title' ;;
		D* ) m='day' ;;
		C* ) m='clock' ;;
		p* ) m='playback' ;;
		c* ) m='capture' ;;
		M* ) m='mail' ;;
		A* ) m='mpd' ;;
		*  ) continue ;;
	esac

	mods[$m]="${cmd[2,-1]}"

	print "%{l}${mods[title]}" \
	      "%{c}${___}${mods[desktops]}${___}" \
	      "%{r}${mods[mail]}${___}${mods[playback]}${___}${mods[capture]}${___}${mods[day]}${___}${mods[clock]}"

done | lemonbar -p -b \
	-g "${geometry[width]}x${geometry[height]}+${geometry[x]}+${geometry[y]}" \
	-B "${bar_bg}" \
	-F "${bar_fg}" \
	-U "${bar_bg}" \
	-o "${font_offset}" -f "${font}" \
	-g "x${geometry[height]}++" \
	-n "$PANEL_NAME" 2>/dev/null

# lemonbar -b -g "1x$(( geometry[height] + 2*bar_tbi_padding))+"

# bspc config -m "$monitor" bottom_padding $(( (bspc config -m "$monitor" bottom_padding) + bar_tpi_padding ))
# target=( $(xdo id -N Bspwm -n root) )
# echo Target ${target[@]}
# xdo below -t "${${(@o)target}[1]}" "$(xdo id -m -a "$PANEL_NAME")"

#bspc config -m "$monitor" top_padding $(( $(bspc config -m focused top_padding) + geometry[height] + bar_bottom_padding + bar_top_padding ))


